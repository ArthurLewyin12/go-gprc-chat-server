syntax = "proto3";

option go_package = "grpc_golang/proto";

package chat;

// Le service Chat principal
service Chat {
  // Établit un flux de communication bi-directionnel.
  // Le client envoie des ClientEvent et le serveur répond avec des ServerEvent.
  rpc Chat(stream ClientEvent) returns (stream ServerEvent) {};
}

// Le service d'authentification
service Auth {
  // Authentifie un utilisateur et retourne un jeton JWT
  rpc Login(LoginRequest) returns (LoginResponse) {};
  // Enregistre un nouvel utilisateur
  rpc Register(RegisterRequest) returns (RegisterResponse) {};
}

// --- Messages d'authentification ---

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
  string error = 2;
}

message RegisterRequest {
  string username = 1;
  string password = 2;
}

message RegisterResponse {
  bool success = 1;
  string error = 2;
}

// --- Messages envoyés par le Client au Serveur ---

message ClientEvent {
  string auth_token = 1;
  oneof event {
    ChatMessage chat_message = 2;
    TypingEvent typing_event = 3;
    DirectMessage direct_message = 4;
  }
}

// --- Messages envoyés par le Serveur au Client ---

message ServerEvent {
  oneof event {
    ChatMessage chat_message = 1;
    TypingEvent typing_event = 2;
    PresenceEvent presence_event = 3;
    UserListEvent user_list_event = 4;
    DirectMessage direct_message = 5;
  }
}

// Un message direct entre deux utilisateurs
message DirectMessage {
  string sender = 1;
  string recipient = 2;
  string message = 3;
  string channel = 4; // Le canal où le DM a été initié (pour le contexte)
}

// Un événement de liste d'utilisateurs en ligne
message UserListEvent {
  string channel = 1;
  repeated string users = 2;
}

// --- Définitions des types d'événements ---

// Un message de chat standard
message ChatMessage {
  string user = 1;
  string message = 2;
  string channel = 3;
}

// Un événement indiquant que quelqu'un est en train d'écrire
message TypingEvent {
  string user = 1;
  string channel = 2;
  bool is_typing = 3; // Vrai si l'utilisateur commence à écrire, faux s'il s'arrête
}

// Un événement de présence (connexion/déconnexion)
message PresenceEvent {
  string user = 1;
  string channel = 2;
  bool is_online = 3; // Vrai pour une connexion, faux pour une déconnexion
}
