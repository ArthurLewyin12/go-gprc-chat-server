// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.3
// source: chat.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ClientEvent_ChatMessage
	//	*ClientEvent_TypingEvent
	Event         isClientEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientEvent) Reset() {
	*x = ClientEvent{}
	mi := &file_chat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEvent) ProtoMessage() {}

func (x *ClientEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEvent.ProtoReflect.Descriptor instead.
func (*ClientEvent) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *ClientEvent) GetEvent() isClientEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ClientEvent) GetChatMessage() *ChatMessage {
	if x != nil {
		if x, ok := x.Event.(*ClientEvent_ChatMessage); ok {
			return x.ChatMessage
		}
	}
	return nil
}

func (x *ClientEvent) GetTypingEvent() *TypingEvent {
	if x != nil {
		if x, ok := x.Event.(*ClientEvent_TypingEvent); ok {
			return x.TypingEvent
		}
	}
	return nil
}

type isClientEvent_Event interface {
	isClientEvent_Event()
}

type ClientEvent_ChatMessage struct {
	ChatMessage *ChatMessage `protobuf:"bytes,1,opt,name=chat_message,json=chatMessage,proto3,oneof"`
}

type ClientEvent_TypingEvent struct {
	TypingEvent *TypingEvent `protobuf:"bytes,2,opt,name=typing_event,json=typingEvent,proto3,oneof"`
}

func (*ClientEvent_ChatMessage) isClientEvent_Event() {}

func (*ClientEvent_TypingEvent) isClientEvent_Event() {}

type ServerEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ServerEvent_ChatMessage
	//	*ServerEvent_TypingEvent
	//	*ServerEvent_PresenceEvent
	Event         isServerEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerEvent) Reset() {
	*x = ServerEvent{}
	mi := &file_chat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerEvent) ProtoMessage() {}

func (x *ServerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerEvent.ProtoReflect.Descriptor instead.
func (*ServerEvent) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *ServerEvent) GetEvent() isServerEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ServerEvent) GetChatMessage() *ChatMessage {
	if x != nil {
		if x, ok := x.Event.(*ServerEvent_ChatMessage); ok {
			return x.ChatMessage
		}
	}
	return nil
}

func (x *ServerEvent) GetTypingEvent() *TypingEvent {
	if x != nil {
		if x, ok := x.Event.(*ServerEvent_TypingEvent); ok {
			return x.TypingEvent
		}
	}
	return nil
}

func (x *ServerEvent) GetPresenceEvent() *PresenceEvent {
	if x != nil {
		if x, ok := x.Event.(*ServerEvent_PresenceEvent); ok {
			return x.PresenceEvent
		}
	}
	return nil
}

type isServerEvent_Event interface {
	isServerEvent_Event()
}

type ServerEvent_ChatMessage struct {
	ChatMessage *ChatMessage `protobuf:"bytes,1,opt,name=chat_message,json=chatMessage,proto3,oneof"`
}

type ServerEvent_TypingEvent struct {
	TypingEvent *TypingEvent `protobuf:"bytes,2,opt,name=typing_event,json=typingEvent,proto3,oneof"`
}

type ServerEvent_PresenceEvent struct {
	PresenceEvent *PresenceEvent `protobuf:"bytes,3,opt,name=presence_event,json=presenceEvent,proto3,oneof"`
}

func (*ServerEvent_ChatMessage) isServerEvent_Event() {}

func (*ServerEvent_TypingEvent) isServerEvent_Event() {}

func (*ServerEvent_PresenceEvent) isServerEvent_Event() {}

// Un message de chat standard
type ChatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Channel       string                 `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_chat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *ChatMessage) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ChatMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatMessage) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

// Un événement indiquant que quelqu'un est en train d'écrire
type TypingEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Channel       string                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	IsTyping      bool                   `protobuf:"varint,3,opt,name=is_typing,json=isTyping,proto3" json:"is_typing,omitempty"` // Vrai si l'utilisateur commence à écrire, faux s'il s'arrête
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypingEvent) Reset() {
	*x = TypingEvent{}
	mi := &file_chat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypingEvent) ProtoMessage() {}

func (x *TypingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypingEvent.ProtoReflect.Descriptor instead.
func (*TypingEvent) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *TypingEvent) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TypingEvent) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *TypingEvent) GetIsTyping() bool {
	if x != nil {
		return x.IsTyping
	}
	return false
}

// Un événement de présence (connexion/déconnexion)
type PresenceEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Channel       string                 `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	IsOnline      bool                   `protobuf:"varint,3,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"` // Vrai pour une connexion, faux pour une déconnexion
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PresenceEvent) Reset() {
	*x = PresenceEvent{}
	mi := &file_chat_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PresenceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceEvent) ProtoMessage() {}

func (x *PresenceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceEvent.ProtoReflect.Descriptor instead.
func (*PresenceEvent) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *PresenceEvent) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PresenceEvent) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PresenceEvent) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

var File_chat_proto protoreflect.FileDescriptor

const file_chat_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"chat.proto\x12\x04chat\"\x86\x01\n" +
	"\vClientEvent\x126\n" +
	"\fchat_message\x18\x01 \x01(\v2\x11.chat.ChatMessageH\x00R\vchatMessage\x126\n" +
	"\ftyping_event\x18\x02 \x01(\v2\x11.chat.TypingEventH\x00R\vtypingEventB\a\n" +
	"\x05event\"\xc4\x01\n" +
	"\vServerEvent\x126\n" +
	"\fchat_message\x18\x01 \x01(\v2\x11.chat.ChatMessageH\x00R\vchatMessage\x126\n" +
	"\ftyping_event\x18\x02 \x01(\v2\x11.chat.TypingEventH\x00R\vtypingEvent\x12<\n" +
	"\x0epresence_event\x18\x03 \x01(\v2\x13.chat.PresenceEventH\x00R\rpresenceEventB\a\n" +
	"\x05event\"U\n" +
	"\vChatMessage\x12\x12\n" +
	"\x04user\x18\x01 \x01(\tR\x04user\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x18\n" +
	"\achannel\x18\x03 \x01(\tR\achannel\"X\n" +
	"\vTypingEvent\x12\x12\n" +
	"\x04user\x18\x01 \x01(\tR\x04user\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12\x1b\n" +
	"\tis_typing\x18\x03 \x01(\bR\bisTyping\"Z\n" +
	"\rPresenceEvent\x12\x12\n" +
	"\x04user\x18\x01 \x01(\tR\x04user\x12\x18\n" +
	"\achannel\x18\x02 \x01(\tR\achannel\x12\x1b\n" +
	"\tis_online\x18\x03 \x01(\bR\bisOnline2:\n" +
	"\x04Chat\x122\n" +
	"\x04Chat\x12\x11.chat.ClientEvent\x1a\x11.chat.ServerEvent\"\x00(\x010\x01B\x13Z\x11grpc_golang/protob\x06proto3"

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData []byte
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_chat_proto_rawDesc), len(file_chat_proto_rawDesc)))
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chat_proto_goTypes = []any{
	(*ClientEvent)(nil),   // 0: chat.ClientEvent
	(*ServerEvent)(nil),   // 1: chat.ServerEvent
	(*ChatMessage)(nil),   // 2: chat.ChatMessage
	(*TypingEvent)(nil),   // 3: chat.TypingEvent
	(*PresenceEvent)(nil), // 4: chat.PresenceEvent
}
var file_chat_proto_depIdxs = []int32{
	2, // 0: chat.ClientEvent.chat_message:type_name -> chat.ChatMessage
	3, // 1: chat.ClientEvent.typing_event:type_name -> chat.TypingEvent
	2, // 2: chat.ServerEvent.chat_message:type_name -> chat.ChatMessage
	3, // 3: chat.ServerEvent.typing_event:type_name -> chat.TypingEvent
	4, // 4: chat.ServerEvent.presence_event:type_name -> chat.PresenceEvent
	0, // 5: chat.Chat.Chat:input_type -> chat.ClientEvent
	1, // 6: chat.Chat.Chat:output_type -> chat.ServerEvent
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	file_chat_proto_msgTypes[0].OneofWrappers = []any{
		(*ClientEvent_ChatMessage)(nil),
		(*ClientEvent_TypingEvent)(nil),
	}
	file_chat_proto_msgTypes[1].OneofWrappers = []any{
		(*ServerEvent_ChatMessage)(nil),
		(*ServerEvent_TypingEvent)(nil),
		(*ServerEvent_PresenceEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_chat_proto_rawDesc), len(file_chat_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}
